//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 28/9/2024 10:53:19 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace SistemaOro.Data.Entities
{
    public partial class RptMovimientosCaja : INotifyPropertyChanging, INotifyPropertyChanged {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private string _Descrubro;

        private string _Descripcion;

        private decimal? _Efectivo;

        private decimal? _Cheque;

        private decimal? _Transferencia;

        private DateTime? _Fecha;

        public RptMovimientosCaja()
        {
            OnCreated();
        }

        public string Descrubro
        {
            get
            {
                return this._Descrubro;
            }
            set
            {
                if (this._Descrubro != value)
                {
                    this.SendPropertyChanging("Descrubro");
                    this._Descrubro = value;
                    this.SendPropertyChanged("Descrubro");
                }
            }
        }

        public string Descripcion
        {
            get
            {
                return this._Descripcion;
            }
            set
            {
                if (this._Descripcion != value)
                {
                    this.SendPropertyChanging("Descripcion");
                    this._Descripcion = value;
                    this.SendPropertyChanged("Descripcion");
                }
            }
        }

        public decimal? Efectivo
        {
            get
            {
                return this._Efectivo;
            }
            set
            {
                if (this._Efectivo != value)
                {
                    this.SendPropertyChanging("Efectivo");
                    this._Efectivo = value;
                    this.SendPropertyChanged("Efectivo");
                }
            }
        }

        public decimal? Cheque
        {
            get
            {
                return this._Cheque;
            }
            set
            {
                if (this._Cheque != value)
                {
                    this.SendPropertyChanging("Cheque");
                    this._Cheque = value;
                    this.SendPropertyChanged("Cheque");
                }
            }
        }

        public decimal? Transferencia
        {
            get
            {
                return this._Transferencia;
            }
            set
            {
                if (this._Transferencia != value)
                {
                    this.SendPropertyChanging("Transferencia");
                    this._Transferencia = value;
                    this.SendPropertyChanged("Transferencia");
                }
            }
        }

        public DateTime? Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.SendPropertyChanging("Fecha");
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                }
            }
        }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
